{"version":3,"sources":["components/slide-dautuhoanmy/bg-desktop.webp","components/slide-dautuhoanmy/motion-slide.tsx","components/slide-dautuhoanmy/use-cycled-list.tsx","components/slide-dautuhoanmy/desktop.tsx"],"names":["MotionBox","m","Box","MotionSlide","styled","withSize","props","list","size","doubledList","useRef","Children","map","child","i","cloneElement","key","useState","current","slice","returnedList","setReturnedList","pos","next","useCallback","length","newReturnedList","produce","draft","shift","push","previous","headPos","pop","unshift","useCycledList","toArray","children","slidesToShow","newChildren","center","Math","round","intervalRef","useEffect","speed","setInterval","clearInterval","slideWidth","useMemo","totalGap","width","variants","initial","opacity","x","flex","animate","index","exit","sx","display","gap","alignItems","height","transform","ml","mr","AnimatePresence","layout","transition","duration","style","originX","originY","custom","Bg","BgBox","Desktop","useWindowDimensions","position","top","left","bottom","overflow","right","ratio","src","bg","slidesData","slides","slide","Stack","id","params","image"],"mappings":"uNAAe,MAA0B,wC,4FCsBnCA,EAAYC,YAAEC,KAkFLC,GAjFKC,YAAOJ,EAAPI,CAAH,2GAOGC,sBAAW,SAC7BC,GAEA,MCnBK,SACLC,EADK,GAGuB,IAD1BC,EACyB,EADzBA,KAEIC,EAAcC,iBAAO,GAAD,mBACrBH,GADqB,YAEpBI,WAASC,IAAIL,GAAM,SAACM,EAAOC,GAAR,OACrBC,uBAAaF,EAAO,CAAEG,IAAI,WAAD,OAAaF,WAG1C,EAAwCG,oBAAc,kBAClDR,EAAYS,QAAQC,MAAM,EAAGX,MADjC,mBAAOY,EAAP,KAAqBC,EAArB,KAGEC,EAAMZ,iBAAOF,EAAO,GAEhBe,EAAOC,uBAAY,WACvBF,EAAIJ,SAAWI,EAAIJ,QAAU,GAAKT,EAAYS,QAAQO,OACtD,IAAMC,EAAkBC,YAAQP,GAAc,SAACQ,GAC7CA,EAAMC,QACND,EAAME,KAAKrB,EAAYS,QAAQI,EAAIJ,aAErCG,EAAgBK,KACf,CAACN,IAEEW,EAAWP,uBAAY,WAC3BF,EAAIJ,UACAI,EAAIJ,QAAU,IAAGI,EAAIJ,SAAWX,EAAKkB,QACzC,IAAIO,EAAUV,EAAIJ,QAAUX,EAAKkB,OAC7BO,EAAU,IAAGA,GAAWzB,EAAKkB,QACjC,IAAMC,EAAkBC,YAAQP,GAAc,SAACQ,GAC7CA,EAAMK,MACNL,EAAMM,QAAQ3B,EAAKyB,OAErBX,EAAgBK,KACf,CAACnB,EAAMa,IAEV,MAAO,CAACA,EAAcW,EAAUR,GDjBEY,CAChCxB,WAASyB,QAAQ9B,EAAM+B,UACvB,CACE7B,KAAMF,EAAMgC,aAAe,IAH/B,mBAAOC,EAAP,KAA0BhB,GAA1B,WAOMiB,EAASC,KAAKC,OAAOpC,EAAMgC,aAAe,GAAK,GAE/CK,EAAcjC,mBACpBkC,qBAAU,WAER,OADItC,EAAMuC,QAAOF,EAAYzB,QAAU4B,YAAYvB,EAAMjB,EAAMuC,QACxD,WACDF,EAAYzB,SAAS6B,cAAcJ,EAAYzB,YAEpD,CAACZ,EAAMuC,MAAOtB,IAEjB,IAAMyB,EAAaC,mBAAQ,WACzB,IAAMC,EAtCE,IAsCgB5C,EAAMgC,aAAe,GAC7C,OAA4B,EAApBhC,EAAME,KAAK2C,MAAeD,IAAa5C,EAAMgC,aAAe,KACnE,CAAChC,EAAMgC,aAAchC,EAAME,OAExB4C,EAAWH,mBAAQ,WACvB,MAAO,CACLI,QAAS,CAAEC,QAAS,EAAGC,EAAG,OAAQC,KAAM,GACxCC,QAAS,SAACC,GAAD,MAAoB,CAC3BJ,QAAmB,IAAVI,GAAeA,IAAUpD,EAAMgC,aAAe,EAAI,EAAI,EAC/DiB,EAAG,EACHC,KAAME,IAAUlB,EAAS,EAAI,IAE/BmB,KAAM,CAAEL,QAAS,EAAGC,EAAG,QAASC,KAAM,MAEvC,CAAChB,EAAQlC,EAAMgC,eAElB,OACE,cAACpC,EAAA,EAAD,UACE,cAACA,EAAA,EAAD,CACE0D,GAAI,CACFC,QAAS,OACTC,IAAI,GAAD,OA3DD,GA2DC,MACHC,WAAY,SACZC,OAAQ,IACRC,UAAU,mBACVC,GAAG,IAAD,OAAMlB,EAAN,MACFmB,GAAG,IAAD,OAAMnB,EAAN,OARN,SAWE,cAACoB,EAAA,EAAD,UACG7B,EAAY3B,KAAI,SAACC,EAAO6C,GACvB,OACE,cAAC1D,EAAD,CACEqE,QAAM,EAENC,WAAY,CAAEC,SAAU,KACxBnB,SAAUA,EACVC,QAAS,UACTI,QAAS,UACTE,KAAM,OACNa,MAAO,CAAEC,QAAS,GAAKC,QAAS,IAChCC,OAAQjB,EATV,SAWG7C,GATIA,EAAMG,kBE1ErB4D,EAAKxE,YAAO,MAAPA,CAAH,+GAMFyE,EAAQzE,YAAOF,IAAPE,CAAH,oNAaI,SAAS0E,EAAQxE,GAC9B,MAA0ByE,cAAlB5B,EAAR,EAAQA,MAAOa,EAAf,EAAeA,OACf,OACE,eAAC9D,EAAA,EAAD,CACE0D,GAAI,CACFT,MAAO,QACPa,OAAQ,QACRgB,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,OAAQ,EACRC,SAAU,UARd,UAWE,cAACP,EAAD,CACEjB,GAAI,CACFoB,SAAU,WACVC,IAAK,EACLC,KAAM,EACNG,MAAO,GALX,SAQE,cAAC,cAAD,CAAaC,MAAK,UAAKnC,EAAL,YAAwB,EAATa,EAAc,GAA/C,SACE,cAACY,EAAD,CAAIW,IAAKC,QAGb,cAACtF,EAAA,EAAD,CACE0D,GAAI,CACFoB,SAAU,WACVC,IAAK,UACLC,KAAK,GAAD,OAAK,IAAU,KAAf,MACJG,MAAM,GAAD,OAAK,IAAU,KAAf,OALT,SAQE,cAAC,EAAD,CAAa/C,aAAc,EAAGO,MAAO,IAArC,SACGvC,EAAMmF,WAAWC,OAAO9E,KAAI,SAAC+E,GAAD,OAC3B,cAACC,EAAA,EAAD,CAAO9B,IAAK,EAAkB,WAAU6B,EAAME,GAA9C,SACE,cAAC,cAAD,CAAaP,MAAO,MAApB,SACE,qBAAKC,IAAKI,EAAMG,OAAON,GAAGO,WAFVJ,EAAME","file":"static/js/15.56dc824d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bg-desktop.3ce90e71.webp\";","import {\n  Children,\n  PropsWithChildren,\n  ReactElement,\n  useEffect,\n  useMemo,\n  useRef,\n} from \"react\";\nimport { useCycledList } from \"./use-cycled-list\";\nimport { Box, styled } from \"@mui/material\";\nimport { AnimatePresence, m } from \"framer-motion\";\nimport { SizeMeProps, withSize } from \"react-sizeme\";\n\nconst GAP = 16;\n\ntype MotionSlideProps = PropsWithChildren<\n  {\n    slidesToShow: number;\n    speed?: number;\n  } & SizeMeProps\n>;\n\nconst MotionBox = m(Box),\n  StyledMotionBox = styled(MotionBox)`\n    &:first-child,\n    &:last-child {\n      opacity: 0 !important;\n    }\n  `;\n\nconst MotionSlide = withSize()(function MotionSlide(\n  props: MotionSlideProps\n): JSX.Element {\n  const [newChildren, prev, next] = useCycledList(\n    Children.toArray(props.children) as unknown as ReactElement[],\n    {\n      size: props.slidesToShow + 2,\n    }\n  );\n\n  const center = Math.round((props.slidesToShow + 1) / 2);\n\n  const intervalRef = useRef<NodeJS.Timeout>();\n  useEffect(() => {\n    if (props.speed) intervalRef.current = setInterval(next, props.speed);\n    return () => {\n      if (intervalRef.current) clearInterval(intervalRef.current);\n    };\n  }, [props.speed, next]);\n\n  const slideWidth = useMemo(() => {\n    const totalGap = GAP * (props.slidesToShow - 1);\n    return (props.size.width! * 1.0 - totalGap) / (props.slidesToShow + 1);\n  }, [props.slidesToShow, props.size]);\n\n  const variants = useMemo(() => {\n    return {\n      initial: { opacity: 0, x: \"200%\", flex: 0 },\n      animate: (index: number) => ({\n        opacity: index === 0 || index === props.slidesToShow + 1 ? 0 : 1,\n        x: 0,\n        flex: index === center ? 2 : 1,\n      }),\n      exit: { opacity: 0, x: \"-200%\", flex: 0 },\n    };\n  }, [center, props.slidesToShow]);\n\n  return (\n    <Box>\n      <Box\n        sx={{\n          display: \"flex\",\n          gap: `${GAP}px`,\n          alignItems: \"center\",\n          height: 300,\n          transform: `translateY(-50%)`,\n          ml: `-${slideWidth}px`,\n          mr: `-${slideWidth}px`,\n        }}\n      >\n        <AnimatePresence>\n          {newChildren.map((child, index) => {\n            return (\n              <MotionBox\n                layout\n                key={child.key}\n                transition={{ duration: 0.55 }}\n                variants={variants}\n                initial={\"initial\"}\n                animate={\"animate\"}\n                exit={\"exit\"}\n                style={{ originX: 0.5, originY: 0.5 }}\n                custom={index}\n              >\n                {child}\n              </MotionBox>\n            );\n          })}\n        </AnimatePresence>\n      </Box>\n    </Box>\n  );\n});\n\nexport default MotionSlide;\n","import {\n  Children,\n  cloneElement,\n  ReactElement,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\";\nimport produce, { Draft } from \"immer\";\n\nexport type UseCycledListOptions = {\n  size: number;\n};\ntype Callback = () => void;\nexport function useCycledList<T extends ReactElement>(\n  list: T[],\n  { size }: UseCycledListOptions\n): [T[], Callback, Callback] {\n  const doubledList = useRef([\n    ...list,\n    ...(Children.map(list, (child, i) =>\n      cloneElement(child, { key: `cloned__${i}` })\n    ) as unknown as T[]),\n  ]);\n  const [returnedList, setReturnedList] = useState<T[]>(() =>\n      doubledList.current.slice(0, size)\n    ),\n    pos = useRef(size - 1);\n\n  const next = useCallback(() => {\n    pos.current = (pos.current + 1) % doubledList.current.length;\n    const newReturnedList = produce(returnedList, (draft) => {\n      draft.shift();\n      draft.push(doubledList.current[pos.current] as unknown as Draft<T>);\n    });\n    setReturnedList(newReturnedList);\n  }, [returnedList]);\n\n  const previous = useCallback(() => {\n    pos.current--;\n    if (pos.current < 0) pos.current += list.length;\n    let headPos = pos.current - list.length;\n    if (headPos < 0) headPos += list.length;\n    const newReturnedList = produce(returnedList, (draft) => {\n      draft.pop();\n      draft.unshift(list[headPos] as unknown as Draft<T>);\n    });\n    setReturnedList(newReturnedList);\n  }, [list, returnedList]);\n\n  return [returnedList, previous, next];\n}\n","import { HoanMySlidesData } from \"../assets/hoanmy\";\nimport { Box, Stack, styled } from \"@mui/material\";\nimport bg from \"./bg-desktop.webp\";\nimport { AspectRatio } from \"@hungphongbk/vth-sdk\";\nimport useWindowDimensions from \"../commons/responsives\";\nimport MotionSlide from \"./motion-slide\";\n\ntype DesktopProps = {\n  slidesData: HoanMySlidesData;\n};\n\nconst Bg = styled(\"img\")`\n  width: 100%;\n  height: auto;\n  object-fit: cover;\n  object-position: center;\n`;\nconst BgBox = styled(Box)`\n  &:after {\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    background-color: rgba(0, 0, 0, 0.46);\n    display: block;\n    content: \"\";\n  }\n`;\n\nexport default function Desktop(props: DesktopProps): JSX.Element {\n  const { width, height } = useWindowDimensions();\n  return (\n    <Box\n      sx={{\n        width: \"100vw\",\n        height: \"100vh\",\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        bottom: 0,\n        overflow: \"hidden\",\n      }}\n    >\n      <BgBox\n        sx={{\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          right: 0,\n        }}\n      >\n        <AspectRatio ratio={`${width}/${(height * 2) / 3}`}>\n          <Bg src={bg} />\n        </AspectRatio>\n      </BgBox>\n      <Box\n        sx={{\n          position: \"absolute\",\n          top: \"66.66vh\",\n          left: `${10000.0 / 1920}vw`,\n          right: `${10000.0 / 1920}vw`,\n        }}\n      >\n        <MotionSlide slidesToShow={5} speed={3000}>\n          {props.slidesData.slides.map((slide) => (\n            <Stack gap={2} key={slide.id} data-key={slide.id}>\n              <AspectRatio ratio={\"4/3\"}>\n                <img src={slide.params.bg.image} />\n              </AspectRatio>\n            </Stack>\n          ))}\n        </MotionSlide>\n      </Box>\n    </Box>\n  );\n}\n"],"sourceRoot":""}